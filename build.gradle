plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

version = "0.1.0"
archivesBaseName = "config-intermediary"
allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: "maven-publish"
    version = rootProject.version
    group = rootProject.maven_group

    repositories {
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }
        maven { url 'https://maven.wispforest.io' }
    }

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }
    loom {
        runtimeOnlyLog4j = true

        runs {
            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmod
            }
            testmodServer {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }
    }

    dependencies {
        // To change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
//        modApi "me.shedaniel.cloth:cloth-config-fabric:9.0.94", {
//            exclude(group: "net.fabricmc.fabric-api")
//        }
//        testmodImplementation "com.terraformersmc:modmenu:5.0.2", {
//            exclude module: "fabric-api"
//        }
    }

    def targetJavaVersion = 17
    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            it.options.release = targetJavaVersion
        }
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
//        archivesBaseName = project.archivesBaseName + "-" + rootProject.version
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    processResources {
        inputs.property "version", rootProject.version
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand "version": rootProject.version
        }
    }
}

subprojects.each {
    System.out.println(it.name)
    if (it.name != "base")
        it.dependencies {
            api project(path: ":base", configuration: "namedElements")
        }
}

subprojects {

    publishing {
        publications {
            mavenJava(MavenPublication) {
                System.out.println(groupId)
                artifact(remapJar) {
                    builtBy remapJar
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
//                groupId 'com.jab125.config-intermediary'
//                artifactId project.name
//                version '1.0.0'
//                from components.java
            }
        }

        setupRepositories(repositories)
    }
}

repositories {
    maven { url 'https://maven.wispforest.io' }
}
repositories {
    maven { url = "https://cursemaven.com/"}
}
dependencies {
    modRuntimeOnly "curse.maven:configured-667378:4166864"
    runtimeOnly ('com.electronwill.night-config:core:3.6.0')
    runtimeOnly ('com.electronwill.night-config:toml:3.6.0')
    modRuntimeOnly "io.wispforest:owo-lib:0.9.3+1.19.3", {
        exclude module: "fabric-api"
    }
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    modApi "com.terraformersmc:modmenu:5.0.2", {
        exclude module: "fabric-api"
    }
}

dependencies {
    afterEvaluate {
        subprojects.each {
            if (it.name == "modTestmod") return ;
            api project(path: "${it.path}", configuration: "namedElements")
            System.out.println(it.archivesBaseName)
            if (!it.archivesBaseName.toLowerCase(Locale.US).contains("test")) {
                include(project(path: "${it.path}", configuration: "namedElements"))
            }
            // testmodImplementation (project("${it.path}:").sourceSets.main.output)
        }
    }
}

def eruwkhgdf = getSubprojects().stream().filter(p -> p.toString().equals("project ':modTestmod'")).findFirst().get()
eruwkhgdf.dependencies {
    afterEvaluate {
        rootProject.subprojects.each {
            if (!it == eruwkhgdf)
                api project(path: "${it.path}", configuration: "namedElements")
        }
    }
}

void setupRepositories(RepositoryHandler repositories) {
   // repositories.mavenLocal() // uncomment for testing
    def ENV = System.getenv()
    if (ENV.MAVEN_URL) {
        repositories.maven {
            url ENV.MAVEN_URL
            if (ENV.MAVEN_USERNAME) {
                credentials {
                    username ENV.MAVEN_USERNAME
                    password ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    if (it.name != "modTestmod") {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", it.name)
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }

    setupRepositories(repositories)
}

allprojects {
    if (it.name == "modTestmod") {
        System.out.println("Not using " + it.name)
        it.tasks.generatePomFileForMavenJavaPublication.enabled = false
        it.tasks.publishToMavenLocal.enabled = false
        it.tasks.publish.enabled = false
        it.tasks.publishMavenJavaPublicationToMavenLocal.enabled = false
    }
}