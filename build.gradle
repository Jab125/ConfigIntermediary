

buildscript {
    dependencies {
        classpath 'org.kohsuke:github-api:1.135'
    }
}

plugins {
    id "java-library"
    id "eclipse"
    id "idea"
    id "maven-publish"
    id "fabric-loom" version "1.0-SNAPSHOT" apply false
    id "org.cadixdev.licenser" version "0.6.1"
    id "org.ajoberstar.grgit" version "3.1.0"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "1.1.0"
}

def ENV = System.getenv()

version = project.version

import org.apache.commons.codec.digest.DigestUtils

def getSubprojectVersion(project) {
    // Get the version from the gradle.properties file
    def version = project.properties["${project.name}-version"]

    if (!version) {
        throw new NullPointerException("Could not find version for " + project.name)
    }

    return version
}

def moduleDependencies(project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
    project.dependencies {
        deps.each {
            api it
        }
    }
}
subprojects {
    version = getSubprojectVersion(project)
}

allprojects {
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "fabric-loom"

    repositories {
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }
        maven { url 'https://maven.wispforest.io' }
        maven { url = "https://cursemaven.com/"}
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    group = "com.jab125.config-intermediary"

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    loom {
        runtimeOnlyLog4j = true

        runs {
            var q = it
            testmodClient {
                inherit(q.getByName("client"))
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmod
            }
            testmodServer {
                inherit(q.getByName("server"))
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }
        createRemapConfigurations(sourceSets.testmod)
    }

    dependencies {
        minecraft "com.mojang:minecraft:$rootProject.minecraft_version"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }

    repositories {
        mavenLocal()
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version, "baseVersion": rootProject.properties["base-version"]
        }
    }

    java {
        withSourcesJar()
    }

    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

subprojects {
    dependencies {
        testmodImplementation sourceSets.main.output
        if (project.name != "base") {
            api project(path: ':base', configuration: 'namedElements')
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }

        setupRepositories(repositories)
    }

    javadoc.enabled = false

    afterEvaluate {
        // Disable the gen sources task on sub projects
        genSourcesWithFernFlower.enabled = false
        genSourcesWithCfr.enabled = false
        unpickJar.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }

    setupRepositories(repositories)
}
loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)

// Required until the deprecation is removed. Fabric API's main jar that is published to maven does not contain sub modules.
loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)

void setupRepositories(RepositoryHandler repositories) {
    //repositories.mavenLocal() // uncomment for testing
    def ENV = System.getenv()
    if (ENV.MAVEN_URL) {
        repositories.maven {
            url ENV.MAVEN_URL
            if (ENV.MAVEN_USERNAME) {
                credentials {
                    username ENV.MAVEN_USERNAME
                    password ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

sourceSets {
    testmod
}

// These modules are not included in the fat jar, maven will resolve them via the pom.
def devOnlyModules = [

]

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modTestmodRuntimeOnly "com.terraformersmc:modmenu:5.0.2", {
        exclude module: "fabric-api"
    }
    modTestmodRuntimeOnly "io.wispforest:owo-lib:0.9.3+1.19.3", {
        exclude module: "fabric-loader"
    }
    modTestmodRuntimeOnly "curse.maven:configured-667378:4166864"
    modTestmodRuntimeOnly 'com.electronwill.night-config:core:3.6.0'
    modTestmodRuntimeOnly 'com.electronwill.night-config:toml:3.6.0'
    afterEvaluate {
        subprojects.each {
            api project(path: ":${it.name}", configuration: "namedElements")

            if (!(it.name in devOnlyModules)) {
                include project("${it.name}:")
            }

            testmodImplementation project("${it.name}:").sourceSets.testmod.output
        }
    }
}

curseforge {
    if (ENV.CURSEFORGE_API_KEY) {
        apiKey = ENV.CURSEFORGE_API_KEY
    }

    project {
        id = "785412"
        changelog = ENV.CHANGELOG ?: "No changelog provided"
        releaseType = project.prerelease == "true" ? "beta" : "release"
        addGameVersion "1.19.3"
        addGameVersion "Fabric"
        addGameVersion "Java 17"
        addGameVersion "Client"
        addGameVersion "Server"

        mainArtifact(remapJar) {
            displayName = "Config Intermediary $project.version for $project.minecraft_version"
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: remapJar) {
    onlyIf {
        ENV.GITHUB_TOKEN
    }

    doLast {
        def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
        def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

        def releaseBuilder = new GHReleaseBuilder(repository, version as String)
        releaseBuilder.name("Config Intermediary $project.version for $project.minecraft_version")
        releaseBuilder.body(ENV.CHANGELOG ?: "No changelog provided")
        releaseBuilder.commitish(getBranch())
        releaseBuilder.prerelease(project.prerelease == "true")

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
    }
}

task modrinth(type: com.modrinth.minotaur.TaskModrinthUpload, dependsOn: remapJar) {
    onlyIf {
        ENV.MODRINTH_TOKEN
    }

    token = ENV.MODRINTH_TOKEN
    projectId = "4bwnHR8S"
    versionNumber = version
    versionName = "Config Intermediary $project.version for $project.minecraft_version"
    releaseType = project.prerelease == "true" ? "beta" : "release"
    changelog = ENV.CHANGELOG ?: "No changelog provided"

    uploadFile = remapJar

    addGameVersion(project.minecraft_version)
    addLoader('fabric')
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
    doFirst {
        def xml = new URL("https://maven.jab125.dev/com/jab125/config-intermediary/config-intermediary/maven-metadata.xml").text
        def metadata = new XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text();
        if (versions.contains(version)) {
            throw new RuntimeException("${version} has already been released!")
        }
    }
}

github.mustRunAfter checkVersion
modrinth.mustRunAfter checkVersion
publish.mustRunAfter checkVersion
project.tasks.curseforge.mustRunAfter checkVersion